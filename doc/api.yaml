openapi: 3.0.0
info:
  title: Plants vs Zombies
  description: Backend docs for Plants vs Zombies clone
  version: 1.0.0

servers:
  - url: /

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        password:
          type: string
    Game:
      type: object
      properties:
        id:
          type: string
        user:
          type: string
        level:
          type: integer
        win:
          type: boolean
        zombiesKilled:
          type: integer
        plantsPlanted:
          type: integer    
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Gets all users (remove password from response)
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user (remove password from response)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
              required:
                - login
                - password
      responses:
        200:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Gets a user by ID
        e.g. “/users/123” (remove password from response)
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user
      description: Updates a user by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: The user's login
                password:
                  type: string
                  description: The user's password
              required:
                - login
                - password
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID. When somebody
        DELETE User, all Tasks where User is assignee
        should be updated to put userId=null
      responses:
        204:
          description: The user has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /games:
    get:
      tags:
        - Games
      summary: Get all games
      description: Returns all games
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Games
      summary: Create game
      description: Creates a new game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                user:
                  type: string
                  description: Player's id
                level:
                  type: integer
                  description: Game level
                win:
                  type: boolean
                  description: Game won
                zombiesKilled:
                  type: integer
                  description: Number of zombies killed
                plantsPlanted:
                  type: integer
                  description: Number of plants planted
              required:
                - user
                - level
      responses:
        200:
          description: The game has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /games/mine:
    get:
      tags:
        - Games
      summary: Get all user's games
      description: Returns all games of authenticated user
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /games/{gameId}:
    parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Games
      summary: Get game by id
      description: Gets the Game by ID (e.g. “/games/123”)
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Game not found
    put:
      tags:
        - Games
      summary: Update game
      description: Updates a Game by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                id:
                  type: string
                  description: Game id
                level:
                  type: integer
                  description: Game level
                win:
                  type: boolean
                  description: Game won
                zombiesKilled:
                  type: integer
                  description: Number of zombies killed
                plantsPlanted:
                  type: integer
                  description: Number of plants planted
              required:
                - id
      responses:
        200:
          description: The game has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Games
      summary: Delete game
      description: Deletes a Game by ID.
        When somebody DELETE Game,
        all its Tasks should be deleted as well
      responses:
        204:
          description: The game has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Game not found
  /auth/login:
    post:
      tags:
        - Login
      security:
        []
      summary: Login
      description: Logins a user and returns a JWT-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: Username
                password:
                  type: string
                  description: Password
              required:
                - user
                - login
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                type: string
                description: JWT Token
        403:
          description: Incorrect login or password
  /auth/signup:
    post:
      tags:
        - Signup
      security:
        []
      summary: Signup
      description: Creates new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: Username
                password:
                  type: string
                  description: Password
              required:
                - user
                - login
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                type: string
                description: JWT Token
        403:
          description: Incorrect login or password
